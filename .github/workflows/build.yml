name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: household_management
            asset_name: household_management-linux-x86_64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: household_management.exe
            asset_name: household_management-windows-x86_64.exe
            
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: household_management
            asset_name: household_management-macos-x86_64
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: household_management
            asset_name: household_management-macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-build-

    # Linux specific dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

    # Build the application
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    # Copy artifact to standard location
    - name: Copy artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}

    - name: Copy artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} ${{ matrix.asset_name }}

    # Upload artifacts for each build
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  # Linux AppImage build
  build-appimage:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: household_management-linux-x86_64
        path: ./
        
    - name: Make executable
      run: chmod +x household_management-linux-x86_64
        
    - name: Create AppImage
      run: |
        # Install linuxdeploy and appimagetool
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy binary
        cp household_management-linux-x86_64 AppDir/usr/bin/household_management
        
        # Create desktop file
        cat > AppDir/usr/share/applications/household_management.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Household Management System
        Name[zh_CN]=户籍管理系统
        Comment=Household Management System
        Comment[zh_CN]=户籍管理系统
        Exec=household_management
        Icon=household_management
        Categories=Office;Database;
        Terminal=false
        EOF
        
        # Create a simple icon (you can replace this with your own icon)
        cat > AppDir/usr/share/icons/hicolor/256x256/apps/household_management.svg << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <svg width="256" height="256" viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg">
          <rect width="256" height="256" fill="#2196F3"/>
          <text x="128" y="140" font-family="Arial" font-size="48" fill="white" text-anchor="middle">户籍</text>
        </svg>
        EOF
        
        # Build AppImage
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
        
        # Find and rename the generated AppImage
        find . -name "*.AppImage" -exec mv {} household_management-linux-x86_64.AppImage \;
    
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: household_management-linux-x86_64.AppImage
        path: household_management-linux-x86_64.AppImage

  # macOS DMG build
  build-dmg:
    runs-on: macos-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download macOS x86_64 artifact
      uses: actions/download-artifact@v4
      with:
        name: household_management-macos-x86_64
        path: ./
        
    - name: Download macOS ARM64 artifact
      uses: actions/download-artifact@v4
      with:
        name: household_management-macos-aarch64
        path: ./
        
    - name: Create universal binary
      run: |
        chmod +x household_management-macos-x86_64
        chmod +x household_management-macos-aarch64
        lipo -create -output household_management household_management-macos-x86_64 household_management-macos-aarch64
        
    - name: Create DMG
      run: |
        # Create app bundle structure
        mkdir -p "户籍管理系统.app/Contents/MacOS"
        mkdir -p "户籍管理系统.app/Contents/Resources"
        
        # Copy binary
        cp household_management "户籍管理系统.app/Contents/MacOS/"
        
        # Create Info.plist
        cat > "户籍管理系统.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>household_management</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.household-management</string>
            <key>CFBundleName</key>
            <string>户籍管理系统</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.12</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # Create DMG
        mkdir dmg_temp
        cp -r "户籍管理系统.app" dmg_temp/
        hdiutil create -volname "户籍管理系统" -srcfolder dmg_temp -ov -format UDZO household_management-macos.dmg
        
    - name: Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: household_management-macos.dmg
        path: household_management-macos.dmg

  # Windows installer build (optional, using NSIS)
  build-windows-installer:
    runs-on: windows-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: household_management-windows-x86_64.exe
        path: ./
        
    - name: Create Windows installer script
      run: |
        @"
        !define APPNAME "户籍管理系统"
        !define COMPANYNAME "Example Company"
        !define DESCRIPTION "Household Management System"
        !define VERSIONMAJOR 1
        !define VERSIONMINOR 0
        !define VERSIONBUILD 0
        !define HELPURL "https://github.com/wangchaozhi/rust_project"
        !define UPDATEURL "https://github.com/wangchaozhi/rust_project"
        !define ABOUTURL "https://github.com/wangchaozhi/rust_project"
        !define INSTALLSIZE 50000

        RequestExecutionLevel admin
        InstallDir "`$PROGRAMFILES64\`${APPNAME}"
        Name "`${APPNAME}"
        Icon "app.ico"
        outFile "household_management-windows-x86_64-installer.exe"

        page directory
        page instfiles

        section "install"
            setOutPath `$INSTDIR
            file "household_management-windows-x86_64.exe"
            
            writeUninstaller "`$INSTDIR\uninstall.exe"
            
            createDirectory "`$SMPROGRAMS\`${APPNAME}"
            createShortCut "`$SMPROGRAMS\`${APPNAME}\`${APPNAME}.lnk" "`$INSTDIR\household_management-windows-x86_64.exe"
            createShortCut "`$DESKTOP\`${APPNAME}.lnk" "`$INSTDIR\household_management-windows-x86_64.exe"
            
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "DisplayName" "`${APPNAME}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "UninstallString" "`$INSTDIR\uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "QuietUninstallString" "`$INSTDIR\uninstall.exe /S"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "InstallLocation" "`$INSTDIR"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "DisplayIcon" "`$INSTDIR\household_management-windows-x86_64.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "Publisher" "`${COMPANYNAME}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "HelpLink" "`${HELPURL}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "URLUpdateInfo" "`${UPDATEURL}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "URLInfoAbout" "`${ABOUTURL}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "DisplayVersion" "`${VERSIONMAJOR}.`${VERSIONMINOR}.`${VERSIONBUILD}"
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "VersionMajor" `${VERSIONMAJOR}
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "VersionMinor" `${VERSIONMINOR}
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "NoModify" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "NoRepair" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}" "EstimatedSize" `${INSTALLSIZE}
        sectionEnd

        section "uninstall"
            delete "`$INSTDIR\household_management-windows-x86_64.exe"
            delete "`$INSTDIR\uninstall.exe"
            rmDir "`$INSTDIR"
            
            delete "`$SMPROGRAMS\`${APPNAME}\`${APPNAME}.lnk"
            rmDir "`$SMPROGRAMS\`${APPNAME}"
            delete "`$DESKTOP\`${APPNAME}.lnk"
            
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APPNAME}"
        sectionEnd
        "@ | Out-File -FilePath installer.nsi -Encoding UTF8

    - name: Build installer with NSIS
      uses: joncloud/makensis-action@v4
      with:
        script-file: installer.nsi
        
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: household_management-windows-x86_64-installer.exe
        path: household_management-windows-x86_64-installer.exe

  # Create release if this is a release event
  release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build-appimage, build-dmg, build-windows-installer, build]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          household_management-linux-x86_64.AppImage/household_management-linux-x86_64.AppImage
          household_management-macos.dmg/household_management-macos.dmg
          household_management-windows-x86_64.exe/household_management-windows-x86_64.exe
          household_management-windows-x86_64-installer.exe/household_management-windows-x86_64-installer.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
